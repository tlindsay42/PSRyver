{
    "docs": [
        {
            "location": "/",
            "text": "PSRyver\n\u00b6\n\n\n\n\nThis is a quick and dirty community module to interact with the Ryver API.\n\n\nPull requests and other contributions would be welcome!\n\n\nPrerequisites\n\u00b6\n\n\n\n\nPowerShell 3 or later\n\n\nValid credentials or an incoming webhook URI from Ryver.\n\n\nAdd an incoming webhook to your team, grab the URI\n\n\n\n\nGetting Started\n\u00b6\n\n\n\n\nInstallation\n\n\nPowerShell 3 & 4\n\n\nDownload the repository\n\n\nUnblock the zip\n\n\nExtract the PSRyver folder to a module path in \n$Env:PSModulePath\n (eg: \n\"$Env:USERPROFILE\\Documents\\WindowsPowerShell\\Modules\\\"\n)\n\n\n\n\n\n\nPowerShell 5+\n    \nInstall-Module\n \n-Name\n \n'PSRyver'\n\n\nImport-Module\n \n-Name\n \n'PSRyver'\n\n\n\n\nList the commands in the module\n    \nGet-Command\n \n-Module\n \n'PSRyver'\n\n\n\n\nGet help\n    \nGet-Help\n \n-Name\n \n'Send-RyverMessage'\n \n-Full\n\n\nGet-Help\n \n-Name\n \n'about_PSRyver'\n\n\n\n\n\n\nExamples\n\u00b6\n\n\nSend a Simple Ryver Message\n\u00b6\n\n\n\n\nThis example shows a crudely crafted message without any attachments, using parameters from \nSend-RyverMessage\n to construct the message.\n  NOTE: This assumes that an incoming webhook URI was setup at \n\"https://${yourTeam}.ryver.com/\"\n\n\nSend a direct message to @tlindsay (not a channel), parsing the text to linkify usernames and channels\n    \n$splat\n \n=\n \n@{\n\n    \nURI\n     \n=\n \n'Some incoming webhook URI from Ryver'\n\n    \nChannel\n \n=\n \n'@tlindsay'\n\n    \nParse\n   \n=\n \n'full'\n\n    \nText\n    \n=\n \n'Hello @tlindsay, join me in #devnull!'\n\n\n}\n\n\nSend-RyverMessage\n \n@splat\n\n\n\n\n\n\n\n\n\nSearch for a Ryver Message\n\u00b6\n\n\n\n\nSearch for a message containing PowerShell, sorting results by timestamp.\n    \n$splat\n \n=\n \n@{\n\n    \nURI\n    \n=\n \n'Some incoming webhook URI from Ryver'\n\n    \nQuery\n  \n=\n \n'PowerShell'\n\n    \nSortBy\n \n=\n \n'timestamp'\n\n\n}\n\n\nFind-RyverMessage\n \n@splat\n\n\n\n\n\n\n\n\n\n\n\nSearch for a message containing PowerShell\n\n\nResults are sorted by best match by default\n\n\nNotice the extra properties and previous/next messages\n    \nFind-RyverMessage\n \n-Token\n \n$Token\n \n`\n\n                  \n-Query\n \n'PowerShell'\n \n|\n\n    \nSelect-Object\n \n-Property\n \n*\n\n\n\n\n\n\n\n\n\nYou could use this simply to search Ryver from the CLI, or in an automated solution that might avoid posting if certain content is already found in Ryver.\n\n\nSend a Richer Ryver Message\n\u00b6\n\n\n\n\nThis is a simple example illustrating some common options when constructing a message attachment giving you a richer message\n    \n$splat\n \n=\n \n@{\n\n  \nColor\n      \n=\n \n[System.Drawing.Color]\n::\nred\n\n  \nTitle\n      \n=\n \n'The System Is Down'\n\n  \nTitleLink\n  \n=\n \n'https://www.youtube.com/watch?v=TmpRs7xN06Q'\n\n  \nText\n       \n=\n \n'Please Do The Needful'\n\n  \nPretext\n    \n=\n \n'Everything is broken'\n\n  \nAuthorName\n \n=\n \n'SCOM Bot'\n\n  \nAuthorIcon\n \n=\n \n'https://tlindsay42.github.io/PSRyver/img/wrench.png'\n \n`\n\n  \nFallback\n   \n=\n \n'Your client is bad'\n\n\n}\n\n\nNew-RyverMessageAttachment\n \n@splat\n \n|\n\n    \nNew-RyverMessage\n \n-Channel\n \n'@tlindsay'\n \n-IconEmoji\n \n:\nbomb\n:\n \n|\n\n    \nSend-RyverMessage\n \n-URI\n \n'Some incoming webhook URI from Ryver'\n\n\n\n\n\n\n\n\n\nNotice that the title is clickable.  You might link to:\n\n\n\n\nThe alert in question\n\n\nA logging solution query\n\n\nA dashboard\n\n\nSome other contextual link\n\n\nStrongbad\n\n\n\n\nSend Multiple Ryver Attachments\n\u00b6\n\n\n\n\nThis example demonstrates that you can chain new attachments together to form a multi-attachment message.\n\n\n\n\n$attachment1\n \n=\n \n@{\n\n    \nColor\n     \n=\n \n$_PSRyverColorMap\n.\nRed\n\n    \nTitle\n     \n=\n \n'The System Is Down'\n\n    \nTitleLink\n \n=\n \n'https://www.youtube.com/watch?v=TmpRs7xN06Q'\n\n    \nText\n      \n=\n \n'Everybody panic!'\n\n    \nPretext\n   \n=\n \n'Everything is broken'\n\n    \nFallback\n  \n=\n \n'Your client is bad'\n\n\n}\n\n\n$attachment2\n \n=\n \n@{\n\n    \nColor\n     \n=\n \n[System.Drawing.Color]\n::\nOrange\n\n    \nTitle\n     \n=\n \n'The Other System Is Down'\n\n    \nTitleLink\n \n=\n \n'https://www.youtube.com/watch?v=TmpRs7xN06Q'\n\n    \nText\n      \n=\n \n'Please Do The Needful'\n \n`\n\n    \nFallback\n  \n=\n \n'Your client is bad'\n\n\n}\n\n\nNew-RyverMessageAttachment\n \n@attachment1\n \n|\n\n    \nNew-RyverMessageAttachment\n \n@attachment2\n \n|\n\n    \nNew-RyverMessage\n \n-Channel\n \n'@tlindsay'\n \n-IconEmoji\n \n:\nbomb\n:\n \n-AsUser\n \n-Username\n \n'SCOM Bot'\n \n|\n\n    \nSend-RyverMessage\n \n-URI\n \n'Some incoming webhook URI from Ryver'\n\n\n\n\n\n\n\n\nNotice that we can chain multiple \nNew-RyverMessageAttachment\ns together.\n\n\nSend a Table of Key Value Pairs\n\u00b6\n\n\n\n\nThis example illustrates a pattern where you might want to send output from a script; you might include errors, successful items, or other output.\n\n\n\n\nPretend we're in a script, and caught an exception of some sort\n    \n$fail\n \n=\n \n[PSCustomObject]\n \n@{\n\n    \nSAMAccountName\n \n=\n \n'bob'\n\n    \nOperation\n      \n=\n \n'Remove privileges'\n\n    \nStatus\n         \n=\n \n\"An error message\"\n\n    \nTimestamp\n      \n=\n \n(\n \nGet-Date\n \n).\nToString\n()\n\n\n}\n\n\n\n# Create an array from the properties in our fail object\n\n\n$fields\n \n=\n \n@()\n\n\nforeach\n(\n \n$property\n \nin\n \n$fail\n.\nPSObject\n.\nProperties\n.\nName\n)\n\n\n{\n\n    \n$fields\n \n+=\n \n@{\n\n        \nTitle\n \n=\n \n$property\n\n        \nValue\n \n=\n \n$fail\n.\n$property\n\n        \nShort\n \n=\n \n$true\n\n    \n}\n\n\n}\n\n\n\n# Construct and send the message!\n\n\n$splat\n \n=\n \n@{\n\n    \nColor\n    \n=\n \n[System.Drawing.Color]\n::\nOrange\n\n    \nTitle\n    \n=\n \n'Failed to process account'\n\n    \nFields\n   \n=\n \n$Fields\n\n    \nFallback\n \n=\n \n'Your client is bad'\n\n\n}\n\n\nNew-RyverMessageAttachment\n \n@splat\n \n|\n\n    \nNew-RyverMessage\n \n-Channel\n \n'devnull'\n \n|\n\n    \nSend-RyverMessage\n \n-URI\n \n'Some incoming webhook URI from Ryver'\n\n\n\n\n\n\n\n\nWe build up a pretend error object, and send each property to a \nfields\n array\n\n\n\n\nCreates an attachment with the fields from our error\n\n\nCreates a message from that attachment and send it with an incoming webhook URI\n\n\n\n\n\n\n\nStore and Retrieve Configs\n\u00b6\n\n\n\n\nTo save time and typing, you can save your credentials or incoming webhook URI to a config file (protected via DPAPI) and a module variable.\n\n\nThis is used as the default for commands, and is reloaded if you open a new PowerShell session.\n\n\n\n\nIncoming Webhook URI\n\u00b6\n\n\nSet-PSRyverConfig\n \n-URI\n \n'SomeRyverUri'\n\n\n\n# Read the current cofig\n\n\nGet-PSRyverConfig\n\n\n\n\n\nCredentials\n\u00b6\n\n\nSet-PSRyverConfig\n \n-Credential\n \n(\n \nGet-Credential\n \n)\n\n\n\n# Read the current cofig\n\n\nGet-PSRyverConfig\n\n\n\n\n\nNotes\n\u00b6\n\n\nCurrently evaluating .NET Core / Cross-platform functionality.  The following will not work initially:\n\n\n\n\nSerialization of URIs via \nSet-PSRyverConfig\n.  Set these values per-session if needed.\n\n\n[System.Drawing.Color]::SomeColor\n shortcut.  Use the provided \n$_PSRyverColorMap\n hash to simplify this (eg: \n$_PSRyverColorMap.red\n)\n\n\n\n\nThis project was ported with \n from Warren Frame's (ramblingcookiemonster) awesome PSSlack project.  Thanks Warren!\n\n\nIf you want to go beyond interacting with the Ryver API, you might consider \nusing a bot\n.",
            "title": "Home"
        },
        {
            "location": "/#psryver",
            "text": "This is a quick and dirty community module to interact with the Ryver API.  Pull requests and other contributions would be welcome!",
            "title": "PSRyver"
        },
        {
            "location": "/#prerequisites",
            "text": "PowerShell 3 or later  Valid credentials or an incoming webhook URI from Ryver.  Add an incoming webhook to your team, grab the URI",
            "title": "Prerequisites"
        },
        {
            "location": "/#getting-started",
            "text": "Installation  PowerShell 3 & 4  Download the repository  Unblock the zip  Extract the PSRyver folder to a module path in  $Env:PSModulePath  (eg:  \"$Env:USERPROFILE\\Documents\\WindowsPowerShell\\Modules\\\" )    PowerShell 5+\n     Install-Module   -Name   'PSRyver'  Import-Module   -Name   'PSRyver'   List the commands in the module\n     Get-Command   -Module   'PSRyver'   Get help\n     Get-Help   -Name   'Send-RyverMessage'   -Full  Get-Help   -Name   'about_PSRyver'",
            "title": "Getting Started"
        },
        {
            "location": "/#examples",
            "text": "",
            "title": "Examples"
        },
        {
            "location": "/#send-a-simple-ryver-message",
            "text": "This example shows a crudely crafted message without any attachments, using parameters from  Send-RyverMessage  to construct the message.\n  NOTE: This assumes that an incoming webhook URI was setup at  \"https://${yourTeam}.ryver.com/\"  Send a direct message to @tlindsay (not a channel), parsing the text to linkify usernames and channels\n     $splat   =   @{ \n     URI       =   'Some incoming webhook URI from Ryver' \n     Channel   =   '@tlindsay' \n     Parse     =   'full' \n     Text      =   'Hello @tlindsay, join me in #devnull!'  }  Send-RyverMessage   @splat",
            "title": "Send a Simple Ryver Message"
        },
        {
            "location": "/#search-for-a-ryver-message",
            "text": "Search for a message containing PowerShell, sorting results by timestamp.\n     $splat   =   @{ \n     URI      =   'Some incoming webhook URI from Ryver' \n     Query    =   'PowerShell' \n     SortBy   =   'timestamp'  }  Find-RyverMessage   @splat      Search for a message containing PowerShell  Results are sorted by best match by default  Notice the extra properties and previous/next messages\n     Find-RyverMessage   -Token   $Token   ` \n                   -Query   'PowerShell'   | \n     Select-Object   -Property   *     You could use this simply to search Ryver from the CLI, or in an automated solution that might avoid posting if certain content is already found in Ryver.",
            "title": "Search for a Ryver Message"
        },
        {
            "location": "/#send-a-richer-ryver-message",
            "text": "This is a simple example illustrating some common options when constructing a message attachment giving you a richer message\n     $splat   =   @{ \n   Color        =   [System.Drawing.Color] :: red \n   Title        =   'The System Is Down' \n   TitleLink    =   'https://www.youtube.com/watch?v=TmpRs7xN06Q' \n   Text         =   'Please Do The Needful' \n   Pretext      =   'Everything is broken' \n   AuthorName   =   'SCOM Bot' \n   AuthorIcon   =   'https://tlindsay42.github.io/PSRyver/img/wrench.png'   ` \n   Fallback     =   'Your client is bad'  }  New-RyverMessageAttachment   @splat   | \n     New-RyverMessage   -Channel   '@tlindsay'   -IconEmoji   : bomb :   | \n     Send-RyverMessage   -URI   'Some incoming webhook URI from Ryver'     Notice that the title is clickable.  You might link to:   The alert in question  A logging solution query  A dashboard  Some other contextual link  Strongbad",
            "title": "Send a Richer Ryver Message"
        },
        {
            "location": "/#send-multiple-ryver-attachments",
            "text": "This example demonstrates that you can chain new attachments together to form a multi-attachment message.   $attachment1   =   @{ \n     Color       =   $_PSRyverColorMap . Red \n     Title       =   'The System Is Down' \n     TitleLink   =   'https://www.youtube.com/watch?v=TmpRs7xN06Q' \n     Text        =   'Everybody panic!' \n     Pretext     =   'Everything is broken' \n     Fallback    =   'Your client is bad'  }  $attachment2   =   @{ \n     Color       =   [System.Drawing.Color] :: Orange \n     Title       =   'The Other System Is Down' \n     TitleLink   =   'https://www.youtube.com/watch?v=TmpRs7xN06Q' \n     Text        =   'Please Do The Needful'   ` \n     Fallback    =   'Your client is bad'  }  New-RyverMessageAttachment   @attachment1   | \n     New-RyverMessageAttachment   @attachment2   | \n     New-RyverMessage   -Channel   '@tlindsay'   -IconEmoji   : bomb :   -AsUser   -Username   'SCOM Bot'   | \n     Send-RyverMessage   -URI   'Some incoming webhook URI from Ryver'    Notice that we can chain multiple  New-RyverMessageAttachment s together.",
            "title": "Send Multiple Ryver Attachments"
        },
        {
            "location": "/#send-a-table-of-key-value-pairs",
            "text": "This example illustrates a pattern where you might want to send output from a script; you might include errors, successful items, or other output.   Pretend we're in a script, and caught an exception of some sort\n     $fail   =   [PSCustomObject]   @{ \n     SAMAccountName   =   'bob' \n     Operation        =   'Remove privileges' \n     Status           =   \"An error message\" \n     Timestamp        =   (   Get-Date   ). ToString ()  }  # Create an array from the properties in our fail object  $fields   =   @()  foreach (   $property   in   $fail . PSObject . Properties . Name )  { \n     $fields   +=   @{ \n         Title   =   $property \n         Value   =   $fail . $property \n         Short   =   $true \n     }  }  # Construct and send the message!  $splat   =   @{ \n     Color      =   [System.Drawing.Color] :: Orange \n     Title      =   'Failed to process account' \n     Fields     =   $Fields \n     Fallback   =   'Your client is bad'  }  New-RyverMessageAttachment   @splat   | \n     New-RyverMessage   -Channel   'devnull'   | \n     Send-RyverMessage   -URI   'Some incoming webhook URI from Ryver'     We build up a pretend error object, and send each property to a  fields  array   Creates an attachment with the fields from our error  Creates a message from that attachment and send it with an incoming webhook URI",
            "title": "Send a Table of Key Value Pairs"
        },
        {
            "location": "/#store-and-retrieve-configs",
            "text": "To save time and typing, you can save your credentials or incoming webhook URI to a config file (protected via DPAPI) and a module variable.  This is used as the default for commands, and is reloaded if you open a new PowerShell session.",
            "title": "Store and Retrieve Configs"
        },
        {
            "location": "/#incoming-webhook-uri",
            "text": "Set-PSRyverConfig   -URI   'SomeRyverUri'  # Read the current cofig  Get-PSRyverConfig",
            "title": "Incoming Webhook URI"
        },
        {
            "location": "/#credentials",
            "text": "Set-PSRyverConfig   -Credential   (   Get-Credential   )  # Read the current cofig  Get-PSRyverConfig",
            "title": "Credentials"
        },
        {
            "location": "/#notes",
            "text": "Currently evaluating .NET Core / Cross-platform functionality.  The following will not work initially:   Serialization of URIs via  Set-PSRyverConfig .  Set these values per-session if needed.  [System.Drawing.Color]::SomeColor  shortcut.  Use the provided  $_PSRyverColorMap  hash to simplify this (eg:  $_PSRyverColorMap.red )   This project was ported with   from Warren Frame's (ramblingcookiemonster) awesome PSSlack project.  Thanks Warren!  If you want to go beyond interacting with the Ryver API, you might consider  using a bot .",
            "title": "Notes"
        }
    ]
}